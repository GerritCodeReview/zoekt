{
  "comments": [
    {
      "key": {
        "uuid": "7bb0d0dc_5339dd01",
        "filename": "matchtree.go",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-08-05T11:38:42Z",
      "side": 1,
      "message": "have you thought of a way to use some of the match information from regexp subtree? This looks like it\u0027s brute-forcing over the file.  I think that you could drop all the sections that lead up to the first trigram match you find, for example.",
      "range": {
        "startLine": 169,
        "startChar": 21,
        "endLine": 169,
        "endChar": 29
      },
      "revId": "7c15fde70fcd8e518c2b46a0f054aefb14215456",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e78f1618_e3838e88",
        "filename": "matchtree.go",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1082084
      },
      "writtenOn": "2019-08-06T09:08:00Z",
      "side": 1,
      "message": "Thats a good idea, but I think is a bit tricky. You would want to skip all sections that have sec.End \u003c trigram. But I don\u0027t think it is sorted like that? However, you could just check if the trigram is in section before running regexp and then we also skip over sections after the trigram.",
      "parentUuid": "7bb0d0dc_5339dd01",
      "range": {
        "startLine": 169,
        "startChar": 21,
        "endLine": 169,
        "endChar": 29
      },
      "revId": "7c15fde70fcd8e518c2b46a0f054aefb14215456",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c932da1_d720b36d",
        "filename": "matchtree.go",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1085159
      },
      "writtenOn": "2019-08-07T18:21:16Z",
      "side": 1,
      "message": "That could be a good way to filter out noise.\n\n---\n\nI\u0027m thinking of writing a matchIterator {nextDoc, prepare, candidates} specifically for DocumentSections similar to how it\u0027s done for files in ngramDocIterator. It would form a logic tree (and, or) from the extracted literals of the regex being searched. Then iterate and return sections that could possibly match the regex by satisfying this logic tree. This might require a bit of refactoring.\n\n\"abc(def|ghi)\" -\u003e and{abc or{def ghi}}\n\nlogic: in order for a DocumentSection to be a valid candidate, the offset of ngrams abc and def or ghi would have to be between DocumentSection.Start and DocumentSection.End. It wouldn\u0027t check every ngram too. It would do a distance iterator between the two lowest frequency ngram for each literal. \n\nI haven\u0027t explored the time/space complexity of this yet, but it might not differ from what Zoekt has currently with files.",
      "parentUuid": "e78f1618_e3838e88",
      "range": {
        "startLine": 169,
        "startChar": 21,
        "endLine": 169,
        "endChar": 29
      },
      "revId": "7c15fde70fcd8e518c2b46a0f054aefb14215456",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68039ad2_be059eb5",
        "filename": "matchtree.go",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1060017
      },
      "writtenOn": "2019-08-08T07:30:07Z",
      "side": 1,
      "message": "Yeah that makes sense. Maybe also makes sense as a follow-up change? What do you think Han-Wen?",
      "parentUuid": "6c932da1_d720b36d",
      "range": {
        "startLine": 169,
        "startChar": 21,
        "endLine": 169,
        "endChar": 29
      },
      "revId": "7c15fde70fcd8e518c2b46a0f054aefb14215456",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8aebd46_4f68cd79",
        "filename": "matchtree.go",
        "patchSetId": 1
      },
      "lineNbr": 430,
      "author": {
        "id": 1082084
      },
      "writtenOn": "2019-08-06T09:08:00Z",
      "side": 1,
      "message": "So the reason we didn\u0027t need to visit symbol matches before is that it was just a normal substring matchtree, just with a trim by section iterator?\n\nWhy do we need to change to a symbolSubstrMatchTree?",
      "revId": "7c15fde70fcd8e518c2b46a0f054aefb14215456",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5312f24_5b3fe2d4",
        "filename": "matchtree.go",
        "patchSetId": 1
      },
      "lineNbr": 709,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-08-05T11:38:42Z",
      "side": 1,
      "message": "shouldn\u0027t subMT be a regexpMatchTree so you can extract it directly?",
      "range": {
        "startLine": 709,
        "startChar": 2,
        "endLine": 709,
        "endChar": 16
      },
      "revId": "7c15fde70fcd8e518c2b46a0f054aefb14215456",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "935f1ad7_c0855a7f",
        "filename": "matchtree.go",
        "patchSetId": 1
      },
      "lineNbr": 709,
      "author": {
        "id": 1085159
      },
      "writtenOn": "2019-08-05T13:19:26Z",
      "side": 1,
      "message": "We can\u0027t say for sure what subMT is because of the case that a substring with fewer than three characters is also treated as a regexpMatchTree.\n\n\"sym:.*\"    - And{Regexp: .*, NoMatch{Const: true}}\n\"sym:bla.*\" - And{Regexp: bla.*, NoMatch{Substring: bla}}\n\"sym:ba\"    - Regexp: ba\n\nIt could be an and match tree or regexp match tree.This is why I chose to traverse the tree to find the regexpMatchTree node.\n\nI will change visitMatchTree to visitMatches though to decrease search area.",
      "parentUuid": "f5312f24_5b3fe2d4",
      "range": {
        "startLine": 709,
        "startChar": 2,
        "endLine": 709,
        "endChar": 16
      },
      "revId": "7c15fde70fcd8e518c2b46a0f054aefb14215456",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}